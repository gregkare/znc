#! /bin/sh
### BEGIN INIT INFO
# Provides:          znc
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: znc initscript
# Description:       This is the init-Script for znc.
### END INIT INFO

# Original Author: Henner M. Kruse
# Author: Shane da Silva
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="znc, an advanced modular IRC bouncer"
NAME=znc
DAEMON=$(which $NAME)
DAEMON_ARGS="--foreground --datadir <%= node['znc']['data_dir'] %>"
PIDDIR=/var/run/$NAME
PIDFILE=$PIDDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER=<%= node['znc']['user'] %>
GROUP=<%= node['znc']['group'] %>
VERBOSE=yes

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Starts the service
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  mkdir -p $PIDDIR
  chown $USER:$GROUP $PIDDIR

  start-stop-daemon --start --background --quiet --chuid $USER:$GROUP \
    --pidfile $PIDFILE --make-pidfile --exec $DAEMON --test > /dev/null || return 1
  start-stop-daemon --start --background --quiet --chuid $USER:$GROUP \
    --pidfile $PIDFILE --make-pidfile --exec $DAEMON -- $DAEMON_ARGS || return 2
}

# Stops the service
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --chuid $USER:$GROUP --pidfile $PIDFILE --name $NAME
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Wait for children to finish too if this is a daemon that forks
  # and if the daemon is only ever run from this initscript.
  # If the above conditions are not satisfied then add some other code
  # that waits for the process to drop all resources that could be
  # needed by services started subsequently.  A last resort is to
  # sleep for some time.
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --chuid $USER:$GROUP --exec $DAEMON
  [ "$?" = 2 ] && return 2
  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  return "$RETVAL"
}

# Sends a SIGHUP to the service
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --chuid $USER:$GROUP --name $NAME
  return 0
}

case "$1" in
  status)
  status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
  ;;
  start)
  log_daemon_msg "Starting $NAME" "$NAME"
  do_start
  case "$?" in
    0|1) log_end_msg 0 ;;
    2) log_end_msg 1 ;;
  esac
  ;;
  stop)
  log_daemon_msg "Stopping $NAME" "$NAME"
  do_stop
  case "$?" in
    0|1) log_end_msg 0 ;;
    2) log_end_msg 1 ;;
  esac
  ;;
  restart|force-reload|reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $NAME" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
      log_end_msg 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
  exit 3
  ;;
esac

:
